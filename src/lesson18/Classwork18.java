package lesson18;

public class Classwork18 {
работа с Эклипса в СКЛ: перспектва - ДБдевелопер, нужно будет скачать MySQL connector
	
Сейчас будем учить SQL !! )
нада скачать MySQL SERVER, ... WORKBANCH (можно попробовать скачать через SQL INSTALLER)
для интереса: МонгоДб, есть МонгоДБ Юнивёрсити, фришные курсы (МонгоДБ фор ДжаваДевелоперс) по нереляционным БД, 8 недель, дают сертификат (в виде ссылочки)

					БД 
реляционные _____ 			______не реляционные
основана на связях			связей м\у таблицами не устанавливается
							инф. хранится в "документах":
							{ post 
								comment
								like
								theme
								... }
							страдают избыточностью, но чаще работают быстрее

в БД есть несколько таблиц
Авторы			Книги			
ид\имя\др\		идАвтора\
1				1

таблицы состоят из кортежей (строк)
Отношения бывают 1к1 (1-1),  1коМногим (1-*), МногиеКоМногим (*-*)
Связь *-* реалтзуется через третью таблицу, в котором будет составной первичный ключ


Первичный ключ - уникальное значение, характеризирующее значение
Натуральный ключ - обозначает информацию, которая может иметь реальное значение
ПК может быть простым, так и составным
Вторичный ключ - "ссылка" на ПК в другой таблице

Каскадное обновление
Если обновляется первичнй ключ в одной таблице, то, если этой ключ вляется вторичным, он должен везде обновиться

Каскадное удаление
Если удаляется кортеж с уникальным, первичным ключём, в других таблицах удаляются кортежи с этим вторичным ключём

Запрет на каскадное удаление:
Нельзя удалить первичный ключ. если на него ссылаются где-то вторичные ключи

ORM - автоматизация работы с БД, позволяет мыслить объектно, а не терминами БД

Нормальная форма (а на хабре есть статья:https://habr.com/post/254773/)
	
DDL - язык определения данных CREATE, ALTER, DROP
DML - язык манипулирования данными - SELECT, INSERT, UPDATE
DCL - язык контроля данными
TCL - язык контроля транзакциями - COMMIT, ROLLBACK, SAFEPOINT


Создание таблицы:
	CREATE TABLE 'User' (
			'UserId' int NOT NULL AUTO_INCREMENT,
			'FirstName' varchar(255) NOT NULL,
			'LastName' varchar(255) NOT NULL,
			'Age' int NOT NULL,
			PRIMARY KEY ('UserId')
		)
	
Вставка: 
	INSERT INTO 'current_db','user' ('UserId','FirstName','Age') VALUES (NULL,'Den','20');
			
Cтруктура селект:
	SELECT [DISTINCT] * FROM 't1' ORDER BY 'f1' DESC, 'f2' [ASC]
	SELECT 'f1','f2' FROM 't1' WHERE f1>10
	
Агрегатные функции: MIN, MAX, AVG, SUM
	SELECT MIN('money') as 'MIN' FROM 'payment'
	

JOIN
бывают INNER и OUTER (LEFT и RIGHT)
1: возвращают значения на пересечении
2.1: вернёт левую таблицу и то, что совпало с правой

пример джоин
таблицы:
	rooms			computers
r_id				c_room
r_name				c_inv
					c_id
SELECT 'r_name','c_inv' FROM 'rooms' JOIN 'computers' ON 'r_id'='c_room'

LEFT JOIN:
комн1	комп1вКомн1	
комн2	копм1вКомн2
комн2	комп2вКомн2
комн3	NULL
комн4	NULL



}
